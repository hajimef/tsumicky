export function addMessages() {
  Blockly.Msg["TSUMICKY_OLED_HW_I2C_INIT"] = "initialize OLED of %2 with hardware I2C connection of %1";
  Blockly.Msg["TSUMICKY_OLED_HW_I2C_INIT_TOOLTIP"] = "Initialize the I2C connected OLED display. Use the default values for SDA/SCL pin numbers.";
  Blockly.Msg["TSUMICKY_OLED_HW_I2C_INIT_PIN"] = "initialize %2 OLED of %1 hardware I2C connection: SDA pin %3 SCL pin %4";
  Blockly.Msg["TSUMICKY_OLED_HW_I2C_INIT_PIN_TOOLTIP"] = "Initialize the I2C connected OLED display by specifying the SDA/SCL pin number.";
  Blockly.Msg["TSUMICKY_OLED_HW_SPI_INIT"] = "initialize %2 OLED of %1 hardware SPI connection: DC pin %3 CS pin %4 RES pin %5";
  Blockly.Msg["TSUMICKY_OLED_HW_SPI_INIT_TOOLTIP"] = "Initialize the SPI connection OLED display.";
  Blockly.Msg["TSUMICKY_OLED_HW_SPI_INIT_PIN"] = "initialize %2 OLED of %1 hardware SPI connection: SDA pin %3 SCK pin %4 DC pin %5 CS pin %6 RES pin %7";
  Blockly.Msg["TSUMICKY_OLED_HW_SPI_INIT_PIN_TOOLTIP"] = "Initialize the OLED display of the SPI connection by specifying the SDA/SCK pin number.";
  Blockly.Msg["TSUMICKY_OLED_TYPE_SSD1306_128X64"] = "SSD1306, 128x64pixels";
  Blockly.Msg["TSUMICKY_OLED_TYPE_SSD1306_128X32"] = "SSD1306, 128x32pixels";
  Blockly.Msg["TSUMICKY_OLED_TYPE_SH1106_128X64"] = "SH1106, 128x64pixels";
  Blockly.Msg["TSUMICKY_OLED_DRAW_PIXEL"] = "draw a pixel on OLED in %1: %2 x %3 y %4";
  Blockly.Msg["TSUMICKY_OLED_DRAW_PIXEL_TOOLTIP"] = "Draw a pixel on the OLED display.";
  Blockly.Msg["TSUMICKY_OLED_DRAW_LINE"] = "draw a line on OLED in %1: %2 x1 %3 y1 %4 x2 %5 y2 %6";
  Blockly.Msg["TSUMICKY_OLED_DRAW_LINE_TOOLTIP"] = "Draw a straight line on the OLED display.\nx1 and y1 specify the coordinates of one end, and x2 and y2 specify the coordinates of the other end.";
  Blockly.Msg["TSUMICKY_OLED_DRAW_FRAME"] = "draw a rectangle on OLED in %1: %2 x %3 y %4 width %5 height %6";
  Blockly.Msg["TSUMICKY_OLED_DRAW_FRAME_TOOLTIP"] = "Draws a rectangle (edge only) on the OLED display. \nSpecify the coordinates of the upper left corner using x and y."
  Blockly.Msg["TSUMICKY_OLED_DRAW_BOX"] = "draw a filled rectangle on OLED in %1: %2 x %3 y %4 width %5 height %6";
  Blockly.Msg["TSUMICKY_OLED_DRAW_BOX_TOOLTIP"] = "Draws a rectangle with a filled interior on the OLED display. \nSpecify the coordinates of the upper left corner using x and y."
  Blockly.Msg["TSUMICKY_OLED_DRAW_CIRCLE"] = "draw a circle on OLED in %1: %2 x %3 y %4 radius %5";
  Blockly.Msg["TSUMICKY_OLED_DRAW_CIRCLE_TOOLTIP"] = "Draw a circle (only the edge) on the OLED display."
  Blockly.Msg["TSUMICKY_OLED_DRAW_DISC"] = "draw a filled circle on OLED in %1: %2 x %3 y %4 radius %5";
  Blockly.Msg["TSUMICKY_OLED_DRAW_DISC_TOOLTIP"] = "Draws a filled circle on the OLED display."
  Blockly.Msg["TSUMICKY_OLED_SET_FONT"] = "set %1 OLED font to %2";
  Blockly.Msg["TSUMICKY_OLED_SET_FONT_TOOLTIP"] = "Select the font for displaying text on OLED (for Arduino firmware).";
  Blockly.Msg["TSUMICKY_OLED_SET_FONT_RPI"] = "set %1 OLED font to %2";
  Blockly.Msg["TSUMICKY_OLED_SET_FONT_RPI_TOOLTIP"] = "Select the font for displaying text on OLED (for Blinka firmware).";
  Blockly.Msg["TSUMICKY_OLED_FONT_6X10_TF"] = "Alphanumeric, 6x10 pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_7X13_TF"] = "alphanumeric, 7x13 pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_F10_T_JAPANESE"] = "Japanese, 10pixels, normal";
  Blockly.Msg["TSUMICKY_OLED_FONT_F12_T_JAPANESE"] = "Japanese, 12pixels, normal";
  Blockly.Msg["TSUMICKY_OLED_FONT_F16_T_JAPANESE"] = "Japanese, 16pixels, normal";
  Blockly.Msg["TSUMICKY_OLED_FONT_DEJAVU_SANS_8"] = "DejaVuSans, 8pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_DEJAVU_SANS_12"] = "DejaVuSans, 12pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_DEJAVU_SANS_16"] = "DejaVuSans, 16pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_IPA_MINCHO_12"] = "IPA Mincho, 12pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_IPA_MINCHO_16"] = "IPA Mincho, 16pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_IPA_GOTHIC_12"] = "IPA Gothic, 12pixels";
  Blockly.Msg["TSUMICKY_OLED_FONT_IPA_GOTHIC_16"] = "IPA Gothic, 16pixels";
  Blockly.Msg["TSUMICKY_OLED_SET_CURSOR"] = "set OLED cursor position for %1: X= %2 Y= %3";
  Blockly.Msg["TSUMICKY_OLED_SET_CURSOR_TOOLTIP"] = "Set the cursor position when displaying characters on OLED.";
  Blockly.Msg["TSUMICKY_OLED_PRINT"] = "draw %2 string on %1 OLED";
  Blockly.Msg["TSUMICKY_OLED_PRINT_TOOLTIP"] = "Draw a string on OLED."
  Blockly.Msg["TSUMICKY_OLED_SEND_BUFFER"] = "display the OLED drawing result of %1";
  Blockly.Msg["TSUMICKY_OLED_SEND_BUFFER_TOOLTIP"] = "Displays drawing results such as lines and characters on OLED.";
  Blockly.Msg["TSUMICKY_OLED_CLEAR_DISPLAY"] = "clear OLED of %1";
  Blockly.Msg["TSUMICKY_OLED_CLEAR_DISPLAY_TOOLTIP"] = "Clears all OLED display contents."
  Blockly.Msg["TSUMICKY_OLED_CLEAR_BUFFER"] = "clear OLED buffer for %1";
  Blockly.Msg["TSUMICKY_OLED_CLEAR_BUFFER_TOOLTIP"] = "Clears the buffer that stores the OLED display contents. \nWhat is currently displayed will remain as is."
};
